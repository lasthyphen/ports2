/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VoteDelegateInterface extends utils.Interface {
  functions: {
    "chief()": FunctionFragment;
    "delegate()": FunctionFragment;
    "expiration()": FunctionFragment;
    "free(uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "iou()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "polling()": FunctionFragment;
    "stake(address)": FunctionFragment;
    "vote(bytes32)": FunctionFragment;
    "vote(address[])": FunctionFragment;
    "votePoll(uint256[],uint256[])": FunctionFragment;
    "votePoll(uint256,uint256)": FunctionFragment;
    "withdrawPoll(uint256)": FunctionFragment;
    "withdrawPoll(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chief"
      | "delegate"
      | "expiration"
      | "free"
      | "gov"
      | "iou"
      | "lock"
      | "polling"
      | "stake"
      | "vote(bytes32)"
      | "vote(address[])"
      | "votePoll(uint256[],uint256[])"
      | "votePoll(uint256,uint256)"
      | "withdrawPoll(uint256)"
      | "withdrawPoll(uint256[])"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chief", values?: undefined): string;
  encodeFunctionData(functionFragment: "delegate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "free",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "iou", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "polling", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votePoll(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votePoll(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPoll(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPoll(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iou", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polling", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vote(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePoll(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePoll(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPoll(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPoll(uint256[])",
    data: BytesLike
  ): Result;

  events: {
    "Free(address,uint256)": EventFragment;
    "Lock(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Free"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
}

export interface FreeEventObject {
  usr: string;
  wad: BigNumber;
}
export type FreeEvent = TypedEvent<[string, BigNumber], FreeEventObject>;

export type FreeEventFilter = TypedEventFilter<FreeEvent>;

export interface LockEventObject {
  usr: string;
  wad: BigNumber;
}
export type LockEvent = TypedEvent<[string, BigNumber], LockEventObject>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export interface VoteDelegate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteDelegateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chief(overrides?: CallOverrides): Promise<[string]>;

    delegate(overrides?: CallOverrides): Promise<[string]>;

    expiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    iou(overrides?: CallOverrides): Promise<[string]>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    polling(overrides?: CallOverrides): Promise<[string]>;

    stake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "votePoll(uint256[],uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      optionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "votePoll(uint256,uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      optionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawPoll(uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawPoll(uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  chief(overrides?: CallOverrides): Promise<string>;

  delegate(overrides?: CallOverrides): Promise<string>;

  expiration(overrides?: CallOverrides): Promise<BigNumber>;

  free(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  iou(overrides?: CallOverrides): Promise<string>;

  lock(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  polling(overrides?: CallOverrides): Promise<string>;

  stake(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "vote(bytes32)"(
    slate: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "vote(address[])"(
    yays: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "votePoll(uint256[],uint256[])"(
    pollIds: PromiseOrValue<BigNumberish>[],
    optionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "votePoll(uint256,uint256)"(
    pollId: PromiseOrValue<BigNumberish>,
    optionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawPoll(uint256)"(
    pollId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawPoll(uint256[])"(
    pollIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chief(overrides?: CallOverrides): Promise<string>;

    delegate(overrides?: CallOverrides): Promise<string>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    iou(overrides?: CallOverrides): Promise<string>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    polling(overrides?: CallOverrides): Promise<string>;

    stake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    "votePoll(uint256[],uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      optionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "votePoll(uint256,uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      optionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawPoll(uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawPoll(uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Free(address,uint256)"(
      usr?: PromiseOrValue<string> | null,
      wad?: null
    ): FreeEventFilter;
    Free(usr?: PromiseOrValue<string> | null, wad?: null): FreeEventFilter;

    "Lock(address,uint256)"(
      usr?: PromiseOrValue<string> | null,
      wad?: null
    ): LockEventFilter;
    Lock(usr?: PromiseOrValue<string> | null, wad?: null): LockEventFilter;
  };

  estimateGas: {
    chief(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(overrides?: CallOverrides): Promise<BigNumber>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    iou(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    polling(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "votePoll(uint256[],uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      optionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "votePoll(uint256,uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      optionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawPoll(uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawPoll(uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chief(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iou(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    polling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "votePoll(uint256[],uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      optionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "votePoll(uint256,uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      optionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawPoll(uint256)"(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawPoll(uint256[])"(
      pollIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
