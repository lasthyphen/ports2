/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VoteProxyInterface extends utils.Interface {
  functions: {
    "gov()": FunctionFragment;
    "cold()": FunctionFragment;
    "freeAll()": FunctionFragment;
    "iou()": FunctionFragment;
    "vote(bytes32)": FunctionFragment;
    "vote(address[])": FunctionFragment;
    "free(uint256)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "hot()": FunctionFragment;
    "chief()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gov"
      | "cold"
      | "freeAll"
      | "iou"
      | "vote(bytes32)"
      | "vote(address[])"
      | "free"
      | "lock"
      | "hot"
      | "chief"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "cold", values?: undefined): string;
  encodeFunctionData(functionFragment: "freeAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "iou", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "free",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hot", values?: undefined): string;
  encodeFunctionData(functionFragment: "chief", values?: undefined): string;

  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iou", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vote(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chief", data: BytesLike): Result;

  events: {};
}

export interface VoteProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gov(overrides?: CallOverrides): Promise<[string]>;

    cold(overrides?: CallOverrides): Promise<[string]>;

    freeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    iou(overrides?: CallOverrides): Promise<[string]>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hot(overrides?: CallOverrides): Promise<[string]>;

    chief(overrides?: CallOverrides): Promise<[string]>;
  };

  gov(overrides?: CallOverrides): Promise<string>;

  cold(overrides?: CallOverrides): Promise<string>;

  freeAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  iou(overrides?: CallOverrides): Promise<string>;

  "vote(bytes32)"(
    slate: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "vote(address[])"(
    yays: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  free(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hot(overrides?: CallOverrides): Promise<string>;

  chief(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    gov(overrides?: CallOverrides): Promise<string>;

    cold(overrides?: CallOverrides): Promise<string>;

    freeAll(overrides?: CallOverrides): Promise<void>;

    iou(overrides?: CallOverrides): Promise<string>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hot(overrides?: CallOverrides): Promise<string>;

    chief(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    gov(overrides?: CallOverrides): Promise<BigNumber>;

    cold(overrides?: CallOverrides): Promise<BigNumber>;

    freeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    iou(overrides?: CallOverrides): Promise<BigNumber>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hot(overrides?: CallOverrides): Promise<BigNumber>;

    chief(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    iou(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vote(bytes32)"(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "vote(address[])"(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chief(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
