import { Contract } from '@ethersproject/contracts';
import { Buffer } from 'buffer/';
import axios from 'axios';
import createDOMPurify from 'dompurify';
import { CID } from 'multiformats';
import isSVG from 'is-svg';
import urlJoin from 'url-join';

function _wrapRegExp() {
  _wrapRegExp = function (re, groups) {
    return new BabelRegExp(re, void 0, groups);
  };

  var _super = RegExp.prototype,
      _groups = new WeakMap();

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

    return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
  }

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      return groups[name] = result[g[name]], groups;
    }, Object.create(null));
  }

  return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    return result && (result.groups = buildGroups(result, this)), result;
  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if ("string" == typeof substitution) {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    }

    if ("function" == typeof substitution) {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;
        return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
      });
    }

    return _super[Symbol.replace].call(this, str, substitution);
  }, _wrapRegExp.apply(this, arguments);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var IPFS_SUBPATH = '/ipfs/';
var IPNS_SUBPATH = '/ipns/';

var ipfsRegex = /*#__PURE__*/_wrapRegExp(/(ipfs:\/|ipns:\/)?(\/)?(ipfs\/|ipns\/)?([\x2D\.0-9A-Z_a-z]+)(\/.*)?/, {
  protocol: 1,
  root: 2,
  subpath: 3,
  target: 4,
  subtarget: 5
});

var base64Regex = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/;
var dataURIRegex = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*)?(,)/;
var BaseError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(BaseError, _Error);

  function BaseError(message) {
    var _this;

    var trueProto = (this instanceof BaseError ? this.constructor : void 0).prototype;
    _this = _Error.call(this, message) || this;
    _this.__proto__ = trueProto;
    return _this;
  }

  return BaseError;
}( /*#__PURE__*/_wrapNativeSuper(Error)); // simple assert without nested check

function assert(condition, message) {
  if (!condition) {
    throw message;
  }
}
function handleSettled(_x) {
  return _handleSettled.apply(this, arguments);
}

function _handleSettled() {
  _handleSettled = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(promises) {
    var values, results, _iterator, _step, result;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            values = [];
            _context.next = 3;
            return Promise.allSettled(promises);

          case 3:
            results = _context.sent;

            for (_iterator = _createForOfIteratorHelperLoose(results); !(_step = _iterator()).done;) {
              result = _step.value;
              if (result.status === 'fulfilled') values.push(result.value);else if (result.status === 'rejected') values.push(null);
            }

            return _context.abrupt("return", values);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _handleSettled.apply(this, arguments);
}

var NFTURIParsingError = /*#__PURE__*/function (_BaseError) {
  _inheritsLoose(NFTURIParsingError, _BaseError);

  function NFTURIParsingError() {
    return _BaseError.apply(this, arguments) || this;
  }

  return NFTURIParsingError;
}(BaseError);
function isCID(hash) {
  // check if given string or object is a valid IPFS CID
  try {
    if (typeof hash === 'string') {
      return Boolean(CID.parse(hash));
    }

    return Boolean(CID.asCID(hash));
  } catch (_error) {
    return false;
  }
}
function parseNFT(uri, seperator) {
  if (seperator === void 0) {
    seperator = '/';
  }

  // parse valid nft spec (CAIP-22/CAIP-29)
  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs
  try {
    assert(uri, 'parameter URI cannot be empty');

    if (uri.startsWith('did:nft:')) {
      // convert DID to CAIP
      uri = uri.replace('did:nft:', '').replace(/_/g, '/');
    }

    var _uri$split = uri.split(seperator),
        reference = _uri$split[0],
        asset_namespace = _uri$split[1],
        tokenID = _uri$split[2];

    var _reference$split = reference.split(':'),
        eip_namespace = _reference$split[0],
        chainID = _reference$split[1];

    var _asset_namespace$spli = asset_namespace.split(':'),
        erc_namespace = _asset_namespace$spli[0],
        contractAddress = _asset_namespace$spli[1];

    assert(eip_namespace && eip_namespace.toLowerCase() === 'eip155', 'Only EIP-155 is supported');
    assert(chainID, 'chainID not found');
    assert(contractAddress, 'contractAddress not found');
    assert(erc_namespace, 'erc namespace not found');
    assert(tokenID, 'tokenID not found');
    return {
      chainID: Number(chainID),
      namespace: erc_namespace.toLowerCase(),
      contractAddress: contractAddress,
      tokenID: tokenID
    };
  } catch (error) {
    throw new NFTURIParsingError(error + " - " + uri);
  }
}
function resolveURI(uri, customGateway) {
  // resolves uri based on its' protocol
  var isEncoded = base64Regex.test(uri);

  if (isEncoded || uri.startsWith('http')) {
    return {
      uri: uri,
      isOnChain: isEncoded,
      isEncoded: isEncoded
    };
  }

  var ipfsGateway = customGateway || 'https://ipfs.io';
  var ipfsRegexpResult = uri.match(ipfsRegex);

  var _ref = (ipfsRegexpResult == null ? void 0 : ipfsRegexpResult.groups) || {},
      protocol = _ref.protocol,
      subpath = _ref.subpath,
      target = _ref.target,
      _ref$subtarget = _ref.subtarget,
      subtarget = _ref$subtarget === void 0 ? '' : _ref$subtarget;

  if ((protocol === 'ipns:/' || subpath === 'ipns/') && target) {
    return {
      uri: urlJoin(ipfsGateway, IPNS_SUBPATH, target, subtarget),
      isOnChain: false,
      isEncoded: false
    };
  } else if (isCID(target)) {
    // Assume that it's a regular IPFS CID and not an IPNS key
    return {
      uri: urlJoin(ipfsGateway, IPFS_SUBPATH, target, subtarget),
      isOnChain: false,
      isEncoded: false
    };
  } else {
    // we may want to throw error here
    return {
      uri: uri.replace(dataURIRegex, ''),
      isOnChain: true,
      isEncoded: false
    };
  }
}

function _sanitize(data, jsDomWindow) {
  var domWindow;

  try {
    domWindow = window;
  } catch (_unused) {
    // if js process run under nodejs require jsdom window
    if (!jsDomWindow) {
      throw Error('In node environment JSDOM window is required');
    }

    domWindow = jsDomWindow;
  }

  var DOMPurify = createDOMPurify(domWindow); // purges malicious scripting from svg content

  var cleanDOM = DOMPurify.sanitize(data);
  return Buffer.from(cleanDOM);
}

function getImageURI(_ref2) {
  var metadata = _ref2.metadata,
      customGateway = _ref2.customGateway,
      jsdomWindow = _ref2.jsdomWindow;
  // retrieves image uri from metadata, if image is onchain then convert to base64
  var image = metadata.image,
      image_url = metadata.image_url,
      image_data = metadata.image_data;

  var _image = image || image_url || image_data;

  assert(_image, 'Image is not available');

  var _resolveURI = resolveURI(_image, customGateway),
      parsedURI = _resolveURI.uri;

  if (parsedURI.startsWith('data:') || parsedURI.startsWith('http')) {
    return parsedURI;
  }

  if (isSVG(parsedURI)) {
    // svg - image_data
    var data = _sanitize(parsedURI, jsdomWindow);

    return "data:image/svg+xml;base64," + data.toString('base64');
  }

  return null;
}
function createCacheAdapter(fetch, ttl) {
  // creates cache adapter for axios
  var _require = require('axios-cache-interceptor'),
      setupCache = _require.setupCache;

  setupCache(fetch, {
    ttl: ttl * 1000
  });
}

function createFetcher(_ref3) {
  var ttl = _ref3.ttl;

  var _fetch = axios.create();

  if (ttl && ttl > 0) {
    createCacheAdapter(_fetch, ttl);
  }

  return _fetch;
}

var fetch = /*#__PURE__*/createFetcher({});

var abi = ['function uri(uint256 _id) public view returns (string memory)', 'function balanceOf(address account, uint256 id) public view returns (uint256)'];

var ERC1155 = /*#__PURE__*/function () {
  function ERC1155() {}

  var _proto = ERC1155.prototype;

  _proto.getMetadata = /*#__PURE__*/function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, ownerAddress, contractAddress, tokenID) {
      var tokenIDHex, contract, _yield$Promise$all, tokenURI, balance, isOwner, _resolveURI, resolvedURI, isOnChain, isEncoded, _resolvedUri, response, metadata;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // exclude opensea api which does not follow erc1155 spec
              tokenIDHex = !tokenID.startsWith('https://api.opensea.io') ? tokenID.replace('0x', '').padStart(64, '0') : tokenID;
              contract = new Contract(contractAddress, abi, provider);
              _context.next = 4;
              return Promise.all([contract.uri(tokenID), ownerAddress && contract.balanceOf(ownerAddress, tokenID)]);

            case 4:
              _yield$Promise$all = _context.sent;
              tokenURI = _yield$Promise$all[0];
              balance = _yield$Promise$all[1];
              // if user has valid address and if token balance of given address is greater than 0
              isOwner = !!(ownerAddress && balance.gt(0));
              _resolveURI = resolveURI(tokenURI), resolvedURI = _resolveURI.uri, isOnChain = _resolveURI.isOnChain, isEncoded = _resolveURI.isEncoded;
              _resolvedUri = resolvedURI;

              if (!isOnChain) {
                _context.next = 13;
                break;
              }

              if (isEncoded) {
                _resolvedUri = Buffer.from(resolvedURI.replace('data:application/json;base64,', ''), 'base64').toString();
              }

              return _context.abrupt("return", JSON.parse(_resolvedUri));

            case 13:
              _context.next = 15;
              return fetch(resolvedURI.replace(/(?:0x)?{id}/, tokenIDHex));

            case 15:
              response = _context.sent;
              _context.next = 18;
              return response == null ? void 0 : response.data;

            case 18:
              metadata = _context.sent;
              return _context.abrupt("return", _extends({}, metadata, {
                is_owner: isOwner
              }));

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function getMetadata(_x, _x2, _x3, _x4) {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }();

  return ERC1155;
}();

var abi$1 = ['function tokenURI(uint256 tokenId) external view returns (string memory)', 'function ownerOf(uint256 tokenId) public view returns (address)'];

var ERC721 = /*#__PURE__*/function () {
  function ERC721() {}

  var _proto = ERC721.prototype;

  _proto.getMetadata = /*#__PURE__*/function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, ownerAddress, contractAddress, tokenID) {
      var contract, _yield$Promise$all, tokenURI, owner, isOwner, _resolveURI, resolvedURI, isOnChain, isEncoded, _resolvedUri, response, metadata;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              contract = new Contract(contractAddress, abi$1, provider);
              _context.next = 3;
              return Promise.all([contract.tokenURI(tokenID), ownerAddress && contract.ownerOf(tokenID)]);

            case 3:
              _yield$Promise$all = _context.sent;
              tokenURI = _yield$Promise$all[0];
              owner = _yield$Promise$all[1];
              // if user has valid address and if owner of the nft matches with the owner address
              isOwner = !!(ownerAddress && owner.toLowerCase() === ownerAddress.toLowerCase());
              _resolveURI = resolveURI(tokenURI), resolvedURI = _resolveURI.uri, isOnChain = _resolveURI.isOnChain, isEncoded = _resolveURI.isEncoded;
              _resolvedUri = resolvedURI;

              if (!isOnChain) {
                _context.next = 12;
                break;
              }

              if (isEncoded) {
                _resolvedUri = Buffer.from(resolvedURI.replace('data:application/json;base64,', ''), 'base64').toString();
              }

              return _context.abrupt("return", JSON.parse(_resolvedUri));

            case 12:
              _context.next = 14;
              return fetch(resolvedURI.replace(/(?:0x)?{id}/, tokenID));

            case 14:
              response = _context.sent;
              _context.next = 17;
              return response == null ? void 0 : response.data;

            case 17:
              metadata = _context.sent;
              return _context.abrupt("return", _extends({}, metadata, {
                is_owner: isOwner
              }));

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function getMetadata(_x, _x2, _x3, _x4) {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }();

  return ERC721;
}();

var URI = /*#__PURE__*/function () {
  function URI() {}

  var _proto = URI.prototype;

  _proto.getMetadata = /*#__PURE__*/function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(uri) {
      var _resolveURI, resolvedURI, isOnChain, isImage, response;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _resolveURI = resolveURI(uri), resolvedURI = _resolveURI.uri, isOnChain = _resolveURI.isOnChain;

              if (!isOnChain) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", resolvedURI);

            case 3:
              _context.next = 5;
              return isImageURI(resolvedURI);

            case 5:
              isImage = _context.sent;

              if (!isImage) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", {
                image: resolvedURI
              });

            case 8:
              _context.next = 10;
              return fetch(resolvedURI);

            case 10:
              response = _context.sent;
              _context.next = 13;
              return response == null ? void 0 : response.data;

            case 13:
              return _context.abrupt("return", _context.sent);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function getMetadata(_x) {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }();

  return URI;
}();

function isImageURI(url) {
  return new Promise(function (resolve) {
    fetch({
      url: url,
      method: 'HEAD'
    }).then(function (result) {
      if (result.status === 200) {
        // retrieve content type header to check if content is image
        var contentType = result.headers['content-type'];
        resolve(contentType == null ? void 0 : contentType.startsWith('image/'));
      } else {
        resolve(false);
      }
    })["catch"](function (error) {
      // if error is not cors related then fail
      if (typeof error.response !== 'undefined') {
        // in case of cors, use image api to validate if given url is an actual image
        resolve(false);
        return;
      }

      if (!globalThis.hasOwnProperty('Image')) {
        // fail in NodeJS, since the error is not cors but any other network issue
        resolve(false);
        return;
      }

      var img = new Image();

      img.onload = function () {
        resolve(true);
      };

      img.onerror = function () {
        resolve(false);
      };

      img.src = url;
    });
  });
}

var specs = /*#__PURE__*/Object.freeze({
  erc721: ERC721,
  erc1155: ERC1155
});
var UnsupportedNamespace = /*#__PURE__*/function (_BaseError) {
  _inheritsLoose(UnsupportedNamespace, _BaseError);

  function UnsupportedNamespace() {
    return _BaseError.apply(this, arguments) || this;
  }

  return UnsupportedNamespace;
}(BaseError);
var AvatarResolver = /*#__PURE__*/function () {
  function AvatarResolver(provider, options) {
    this.provider = provider;
    this.options = options;

    if (options != null && options.cache && (options == null ? void 0 : options.cache) > 0) {
      createCacheAdapter(fetch, options == null ? void 0 : options.cache);
    }
  }

  var _proto = AvatarResolver.prototype;

  _proto.getMetadata = /*#__PURE__*/function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(ens) {
      var _yield$handleSettled, resolvedAddress, resolver, avatarURI, uriSpec, _metadata, _parseNFT, chainID, namespace, contractAddress, tokenID, Spec, spec, host_meta, metadata;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return handleSettled([this.provider.resolveName(ens), this.provider.getResolver(ens)]);

            case 2:
              _yield$handleSettled = _context.sent;
              resolvedAddress = _yield$handleSettled[0];
              resolver = _yield$handleSettled[1];

              if (resolver) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", null);

            case 7:
              _context.next = 9;
              return resolver.getText('avatar');

            case 9:
              avatarURI = _context.sent;

              if (avatarURI) {
                _context.next = 12;
                break;
              }

              return _context.abrupt("return", null);

            case 12:
              if (/eip155:/i.test(avatarURI)) {
                _context.next = 18;
                break;
              }

              uriSpec = new URI();
              _context.next = 16;
              return uriSpec.getMetadata(avatarURI);

            case 16:
              _metadata = _context.sent;
              return _context.abrupt("return", _extends({
                uri: ens
              }, _metadata));

            case 18:
              // parse retrieved avatar uri
              _parseNFT = parseNFT(avatarURI), chainID = _parseNFT.chainID, namespace = _parseNFT.namespace, contractAddress = _parseNFT.contractAddress, tokenID = _parseNFT.tokenID; // detect avatar spec by namespace

              Spec = specs[namespace];

              if (Spec) {
                _context.next = 22;
                break;
              }

              throw new UnsupportedNamespace("Unsupported namespace: " + namespace);

            case 22:
              spec = new Spec(); // add meta information of the avatar record

              host_meta = {
                chain_id: chainID,
                namespace: namespace,
                contract_address: contractAddress,
                token_id: tokenID,
                reference_url: "https://opensea.io/assets/" + contractAddress + "/" + tokenID
              }; // retrieve metadata

              _context.next = 26;
              return spec.getMetadata(this.provider, resolvedAddress, contractAddress, tokenID);

            case 26:
              metadata = _context.sent;
              return _context.abrupt("return", _extends({
                uri: ens,
                host_meta: host_meta
              }, metadata));

            case 28:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getMetadata(_x) {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }();

  _proto.getAvatar = /*#__PURE__*/function () {
    var _getAvatar = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(ens, data) {
      var _this$options;

      var metadata;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getMetadata(ens);

            case 2:
              metadata = _context2.sent;

              if (metadata) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", null);

            case 5:
              return _context2.abrupt("return", getImageURI({
                metadata: metadata,
                customGateway: (_this$options = this.options) == null ? void 0 : _this$options.ipfs,
                jsdomWindow: data == null ? void 0 : data.jsdomWindow
              }));

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getAvatar(_x2, _x3) {
      return _getAvatar.apply(this, arguments);
    }

    return getAvatar;
  }();

  return AvatarResolver;
}();
var utils = {
  getImageURI: getImageURI,
  parseNFT: parseNFT,
  resolveURI: resolveURI
};

export { AvatarResolver, UnsupportedNamespace, specs, utils };
//# sourceMappingURL=ens-avatar.esm.js.map
