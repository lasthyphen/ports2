{"version":3,"sources":["../src/reach-listbox.tsx","../src/machine.ts"],"sourcesContent":["/**\n * Welcome to @reach/listbox!\n *\n * See NOTES.md for some background info if you're interested!\n *\n * TODO: OS-specific behavior (ie, Enter key on native select on Windows)\n * TODO: Consider hack to implement focus controls in forms on iOS\n *       https://github.com/angular/material/issues/8440\n *       Instead of a hidden select, maybe use a visually hidden select with\n *       aria-hidden. When that input gets focus, immediate send focus to the\n *       ListboxButton, then toggle the hidden input's tabIndex to prevent\n *       re-focusing it (this is just an idea, may not work, no idea how some\n *       screen-reader would deal with it).\n * TODO: Write examples showing fallback to a native select menu for users\n *       without JavaScript enabled and small-screen users.\n * TODO: Check positioning on mobile near collision points\n *       https://twitter.com/PipoPeperoni/status/1237597623508275200\n * TODO: Test arrow key navigation in forms in Firefox.\n *       Probably similar solution needed for iOS issue above.\n *       https://twitter.com/GassnerKendall/status/1237778370118598661\n *\n * @see Docs     https://reach.tech/listbox\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/listbox\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n */\n\nimport * as React from \"react\";\nimport { useId } from \"@reach/auto-id\";\nimport { Popover, positionMatchWidth } from \"@reach/popover\";\nimport type { PopoverProps } from \"@reach/popover\";\nimport {\n\tcreateDescendantContext,\n\tDescendantProvider,\n\tuseDescendant,\n\tuseDescendantKeyDown,\n\tuseDescendants,\n\tuseDescendantsInit,\n} from \"@reach/descendants\";\nimport type { Descendant } from \"@reach/descendants\";\nimport {\n\tcomposeEventHandlers,\n\tcreateNamedContext,\n\tisBoolean,\n\tisFunction,\n\tisRightClick,\n\tisString,\n\tmakeId,\n\tuseComposedRefs,\n\tuseControlledSwitchWarning,\n\tuseIsomorphicLayoutEffect as useLayoutEffect,\n\tuseStableCallback,\n\tuseStatefulRefValue,\n} from \"@reach/utils\";\nimport type { DistributiveOmit } from \"@reach/utils\";\nimport type * as Polymorphic from \"@reach/polymorphic\";\nimport { useMachine, useCreateMachine } from \"@reach/machine\";\nimport type { StateMachine } from \"@reach/machine\";\nimport {\n\tcreateMachineDefinition,\n\tListboxEvents,\n\tListboxStates,\n} from \"./machine\";\nimport type {\n\tListboxNodeRefs,\n\tListboxStateData,\n\tListboxEvent,\n} from \"./machine\";\n\nconst DEBUG = false;\n\n////////////////////////////////////////////////////////////////////////////////\n// ListboxContext\n\nconst ListboxDescendantContext = createDescendantContext<ListboxDescendant>(\n\t\"ListboxDescendantContext\"\n);\nconst ListboxContext = createNamedContext(\n\t\"ListboxContext\",\n\t{} as InternalListboxContextValue\n);\nconst ListboxGroupContext = createNamedContext(\n\t\"ListboxGroupContext\",\n\t{} as ListboxGroupContextValue\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxInput\n *\n * The top-level component and context provider for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxinput\n */\nconst ListboxInput = React.forwardRef(function ListboxInput(\n\t{\n\t\tas: Comp = \"div\",\n\t\t\"aria-labelledby\": ariaLabelledBy,\n\t\t\"aria-label\": ariaLabel,\n\t\tchildren,\n\t\tdefaultValue,\n\t\tdisabled = false,\n\t\tform,\n\t\tname,\n\t\tonChange,\n\t\trequired,\n\t\tvalue: valueProp,\n\n\t\t// We only use this prop for console warnings\n\t\t__componentName = \"ListboxInput\",\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet isControlled = React.useRef(valueProp != null);\n\tlet [options, setOptions] = useDescendantsInit<ListboxDescendant>();\n\n\t// DOM refs\n\tlet buttonRef = React.useRef<ListboxNodeRefs[\"button\"]>(null);\n\tlet hiddenInputRef = React.useRef<HTMLInputElement>(null);\n\tlet highlightedOptionRef =\n\t\tReact.useRef<ListboxNodeRefs[\"highlightedOption\"]>(null);\n\tlet inputRef = React.useRef<ListboxNodeRefs[\"input\"]>(null);\n\tlet listRef = React.useRef<ListboxNodeRefs[\"list\"]>(null);\n\tlet popoverRef = React.useRef<ListboxNodeRefs[\"popover\"]>(null);\n\tlet selectedOptionRef = React.useRef<ListboxNodeRefs[\"selectedOption\"]>(null);\n\n\tlet machine = useCreateMachine(\n\t\tcreateMachineDefinition({\n\t\t\t// The initial value of our machine should come from the `value` or\n\t\t\t// `defaultValue` props if they exist.\n\t\t\tvalue: (isControlled.current ? valueProp! : defaultValue) || null,\n\t\t})\n\t);\n\n\tlet [state, send] = useMachine(\n\t\tmachine,\n\t\t{\n\t\t\tbutton: buttonRef,\n\t\t\thiddenInput: hiddenInputRef,\n\t\t\thighlightedOption: highlightedOptionRef,\n\t\t\tinput: inputRef,\n\t\t\tlist: listRef,\n\t\t\tpopover: popoverRef,\n\t\t\tselectedOption: selectedOptionRef,\n\t\t},\n\t\tDEBUG\n\t);\n\n\tfunction handleValueChange(newValue: string) {\n\t\tif (newValue !== state.context.value) {\n\t\t\tonChange?.(newValue);\n\t\t}\n\t}\n\n\t// IDs for aria attributes\n\tlet _id = useId(props.id);\n\tlet id = props.id || makeId(\"listbox-input\", _id);\n\n\tlet ref = useComposedRefs(inputRef, forwardedRef);\n\n\t// If the button has children, we just render them as the label.\n\t// Otherwise we'll find the option with a value that matches the listbox value\n\t// and use its label in the button. We'll get that here and send it to the\n\t// button via context.\n\t// If a user needs the label for SSR to prevent hydration mismatch issues,\n\t// they need to control the state of the component and pass a label directly\n\t// to the button.\n\tlet valueLabel = React.useMemo(() => {\n\t\tlet selected = options.find(\n\t\t\t(option) => option.value === state.context.value\n\t\t);\n\t\treturn selected ? selected.label : null;\n\t}, [options, state.context.value]);\n\n\tlet isExpanded = isListboxExpanded(state.value);\n\n\tlet context: InternalListboxContextValue = {\n\t\tariaLabel,\n\t\tariaLabelledBy,\n\t\tbuttonRef,\n\t\tdisabled,\n\t\thighlightedOptionRef,\n\t\tisExpanded,\n\t\tlistboxId: id,\n\t\tlistboxValueLabel: valueLabel,\n\t\tlistRef,\n\t\tonValueChange: handleValueChange,\n\t\tpopoverRef,\n\t\tselectedOptionRef,\n\t\tsend,\n\t\tstate: state.value as ListboxStates,\n\t\tstateData: state.context,\n\t};\n\n\t// For uncontrolled listbox components where no `defaultValue` is provided, we\n\t// will update the value based on the value of the first selectable option.\n\t// We call the update directly because:\n\t//   A) we only ever need to do this once, so we can guard with a ref\n\t//   B) useLayoutEffect races useDecendant, so we might not have options yet\n\t//   C) useEffect will cause a flash\n\tlet mounted = React.useRef(false);\n\tif (\n\t\t!isControlled.current && // the app is not controlling state\n\t\tdefaultValue == null && // there is no default value\n\t\t!mounted.current && // we haven't done this already\n\t\toptions.length // we have some options\n\t) {\n\t\tmounted.current = true;\n\t\tlet first = options.find((option) => !option.disabled);\n\t\tif (first && first.value) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.ValueChange,\n\t\t\t\tvalue: first.value!,\n\t\t\t});\n\t\t}\n\t}\n\n\tuseControlledSwitchWarning(valueProp, \"value\", __componentName);\n\n\t// Even if the app controls state, we still need to update it internally to\n\t// run the state machine transitions\n\tuseControlledStateSync(valueProp, state.context.value, () => {\n\t\tsend({\n\t\t\ttype: ListboxEvents.ValueChange,\n\t\t\tvalue: valueProp!,\n\t\t});\n\t});\n\n\tuseLayoutEffect(() => {\n\t\tsend({\n\t\t\ttype: ListboxEvents.GetDerivedData,\n\t\t\tdata: { options },\n\t\t});\n\t}, [options, send]);\n\n\tReact.useEffect(() => {\n\t\tfunction handleMouseDown(event: MouseEvent) {\n\t\t\tlet { target, relatedTarget } = event;\n\t\t\tif (!popoverContainsEventTarget(popoverRef.current, target)) {\n\t\t\t\tsend({\n\t\t\t\t\ttype: ListboxEvents.OutsideMouseDown,\n\t\t\t\t\trelatedTarget: relatedTarget || target,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (isExpanded) {\n\t\t\twindow.addEventListener(\"mousedown\", handleMouseDown);\n\t\t}\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"mousedown\", handleMouseDown);\n\t\t};\n\t}, [send, isExpanded]);\n\n\tReact.useEffect(() => {\n\t\tfunction handleMouseUp(event: MouseEvent) {\n\t\t\tlet { target, relatedTarget } = event;\n\t\t\tif (!popoverContainsEventTarget(popoverRef.current, target)) {\n\t\t\t\tsend({\n\t\t\t\t\ttype: ListboxEvents.OutsideMouseUp,\n\t\t\t\t\trelatedTarget: relatedTarget || target,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (isExpanded) {\n\t\t\twindow.addEventListener(\"mouseup\", handleMouseUp);\n\t\t}\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"mouseup\", handleMouseUp);\n\t\t};\n\t}, [send, isExpanded]);\n\n\t// If a form is reset, we'll need to manually clear the value since we are\n\t// controlling it internally.\n\tReact.useEffect(() => {\n\t\tlet form = hiddenInputRef.current?.form;\n\t\tif (!form) return;\n\n\t\tfunction handleReset(event: Event) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.ResetValue,\n\t\t\t\tisControlled: isControlled.current,\n\t\t\t});\n\t\t}\n\n\t\tform.addEventListener(\"reset\", handleReset);\n\t\treturn () => {\n\t\t\tform?.removeEventListener(\"reset\", handleReset);\n\t\t};\n\t}, [inputRef, isControlled, send]);\n\n\treturn (\n\t\t<Comp\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t\tdata-reach-listbox-input=\"\"\n\t\t\tdata-state={isExpanded ? \"expanded\" : \"closed\"}\n\t\t\tdata-value={state.context.value}\n\t\t\tid={id}\n\t\t>\n\t\t\t<ListboxContext.Provider value={context}>\n\t\t\t\t<DescendantProvider\n\t\t\t\t\tcontext={ListboxDescendantContext}\n\t\t\t\t\titems={options}\n\t\t\t\t\tset={setOptions}\n\t\t\t\t>\n\t\t\t\t\t{isFunction(children)\n\t\t\t\t\t\t? children({\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tisExpanded,\n\t\t\t\t\t\t\t\tvalue: state.context.value,\n\t\t\t\t\t\t\t\tselectedOptionRef: selectedOptionRef,\n\t\t\t\t\t\t\t\thighlightedOptionRef: highlightedOptionRef,\n\t\t\t\t\t\t\t\tvalueLabel,\n\t\t\t\t\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\t\t\t\t\texpanded: isExpanded,\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: children}\n\n\t\t\t\t\t{(form || name || required) && (\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tref={hiddenInputRef}\n\t\t\t\t\t\t\tdata-reach-listbox-hidden-input=\"\"\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\tform={form}\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\trequired={required}\n\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\ttype=\"hidden\"\n\t\t\t\t\t\t\tvalue={state.context.value || \"\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</DescendantProvider>\n\t\t\t</ListboxContext.Provider>\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\n\t\"div\",\n\tListboxInputProps & { __componentName?: string }\n>;\n\nListboxInput.displayName = \"ListboxInput\";\n\n/**\n * @see Docs https://reach.tech/listbox#listboxinput-props\n */\ntype ListboxInputProps = Pick<\n\tReact.ComponentProps<\"select\">,\n\t\"form\" | \"name\" | \"required\"\n> & {\n\t/**\n\t * The composed listbox expects to receive `ListboxButton` and\n\t * `ListboxPopover` as children. You can also pass in arbitrary wrapper\n\t * elements if desired.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxinput-children\n\t */\n\tchildren:\n\t\t| React.ReactNode\n\t\t| ((\n\t\t\t\tprops: ListboxContextValue & {\n\t\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\t\texpanded: boolean;\n\t\t\t\t}\n\t\t  ) => React.ReactNode);\n\t/**\n\t * The default value of an uncontrolled listbox.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxinput-defaultvalue\n\t */\n\tdefaultValue?: ListboxValue;\n\t/**\n\t * Whether or not the listbox is disabled.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxinput-disabled\n\t */\n\tdisabled?: boolean;\n\t/**\n\t * The callback that fires when the listbox value changes.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxinput-onchange\n\t * @param newValue\n\t */\n\tonChange?(newValue: ListboxValue): void;\n\t/**\n\t * The current value of a controlled listbox.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxinput-value\n\t */\n\tvalue?: ListboxValue;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Listbox\n *\n * High-level listbox API\n *\n * @example\n * <Listbox>\n *   <ListboxOption value=\"1\">Option 1</ListboxOption>\n *   <ListboxOption value=\"2\">Option 2</ListboxOption>\n *   <ListboxOption value=\"3\">Option 3</ListboxOption>\n * </Listbox>\n *\n * @see Docs https://reach.tech/listbox#listbox-1\n */\nconst Listbox = React.forwardRef(function Listbox(\n\t{ arrow = \"▼\", button, children, portal = true, ...props },\n\tforwardedRef\n) {\n\treturn (\n\t\t<ListboxInput {...props} __componentName=\"Listbox\" ref={forwardedRef}>\n\t\t\t{({ value, valueLabel }) => (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<ListboxButton\n\t\t\t\t\t\tarrow={arrow}\n\t\t\t\t\t\tchildren={\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t? isFunction(button)\n\t\t\t\t\t\t\t\t\t? button({ value, label: valueLabel })\n\t\t\t\t\t\t\t\t\t: button\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<ListboxPopover portal={portal}>\n\t\t\t\t\t\t<ListboxList>{children}</ListboxList>\n\t\t\t\t\t</ListboxPopover>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</ListboxInput>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", ListboxProps>;\n\nListbox.displayName = \"Listbox\";\n\n/**\n * @see Docs https://reach.tech/listbox#listbox-props\n */\ntype ListboxProps = Omit<ListboxInputProps, \"children\"> &\n\tPick<React.ComponentProps<\"select\">, \"form\" | \"name\" | \"required\"> & {\n\t\t/**\n\t\t * Renders a text string or React node to represent an arrow inside the\n\t\t * Listbox button.\n\t\t *\n\t\t * @see Docs https://reach.tech/listbox#listbox-arrow\n\t\t */\n\t\tarrow?: React.ReactNode | boolean;\n\t\t/**\n\t\t * A render function or React node to to render the Listbox button's inner\n\t\t * content. See the API for the ListboxButton children prop for details.\n\t\t *\n\t\t * @see Docs https://reach.tech/listbox#listbox-button\n\t\t */\n\t\tbutton?:\n\t\t\t| React.ReactNode\n\t\t\t| ((props: {\n\t\t\t\t\tvalue: ListboxValue | null;\n\t\t\t\t\tlabel: string | null;\n\t\t\t  }) => React.ReactNode);\n\t\tchildren: React.ReactNode;\n\t\t/**\n\t\t * Whether or not the popover should be rendered inside a portal. Defaults to\n\t\t * `true`.\n\t\t *\n\t\t * @see Docs https://reach.tech/listbox#listbox-portal\n\t\t */\n\t\tportal?: boolean;\n\t};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxButton\n *\n * The interactive toggle button that triggers the popover for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listbox-button\n */\nconst ListboxButtonImpl = React.forwardRef(function ListboxButton(\n\t{\n\t\t\"aria-label\": ariaLabel,\n\t\tarrow = false,\n\t\tas: Comp = \"span\",\n\t\tchildren,\n\t\tonKeyDown,\n\t\tonMouseDown,\n\t\tonMouseUp,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet {\n\t\tbuttonRef,\n\t\tsend,\n\t\tariaLabelledBy,\n\t\tdisabled,\n\t\tisExpanded,\n\t\tlistboxId,\n\t\tstateData,\n\t\tlistboxValueLabel,\n\t} = React.useContext(ListboxContext);\n\tlet listboxValue = stateData.value;\n\n\tlet ref = useComposedRefs(buttonRef, forwardedRef);\n\n\tlet handleKeyDown = useKeyDown();\n\n\tfunction handleMouseDown(event: React.MouseEvent) {\n\t\tif (!isRightClick(event.nativeEvent)) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.ButtonMouseDown,\n\t\t\t\tdisabled,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction handleMouseUp(event: React.MouseEvent) {\n\t\tif (!isRightClick(event.nativeEvent)) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tsend({ type: ListboxEvents.ButtonMouseUp });\n\t\t}\n\t}\n\n\tlet id = makeId(\"button\", listboxId);\n\n\t// If the button has children, we just render them as the label\n\t// If a user needs the label on the server to prevent hydration mismatch\n\t// errors, they need to control the state of the component and pass a label\n\t// directly to the button.\n\tlet label: React.ReactNode = React.useMemo(() => {\n\t\tif (!children) {\n\t\t\treturn listboxValueLabel;\n\t\t} else if (isFunction(children)) {\n\t\t\treturn children({\n\t\t\t\tisExpanded,\n\t\t\t\tlabel: listboxValueLabel!,\n\t\t\t\tvalue: listboxValue,\n\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\texpanded: isExpanded,\n\t\t\t});\n\t\t}\n\t\treturn children;\n\t}, [children, listboxValueLabel, isExpanded, listboxValue]);\n\n\treturn (\n\t\t<Comp\n\t\t\t// Applicable to all host language elements regardless of whether a\n\t\t\t// `role` is applied.\n\t\t\t// https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n\t\t\taria-disabled={disabled || undefined}\n\t\t\t// Set by the JavaScript when the listbox is displayed. Otherwise, is\n\t\t\t// not present.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n\t\t\taria-expanded={isExpanded || undefined}\n\t\t\t// Indicates that activating the button displays a listbox.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n\t\t\taria-haspopup=\"listbox\"\n\t\t\t// References the two elements whose labels are concatenated by the\n\t\t\t// browser to label the button. The first element is a span containing\n\t\t\t// perceivable label for the listbox component. The second element is\n\t\t\t// the button itself; the button text is set to the name of the\n\t\t\t// currently chosen element.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n\t\t\t// If an `aria-label` is passed, we should skip `aria-labelledby` to\n\t\t\t// avoid confusion.\n\t\t\taria-labelledby={\n\t\t\t\tariaLabel ? undefined : [ariaLabelledBy, id].filter(Boolean).join(\" \")\n\t\t\t}\n\t\t\taria-label={ariaLabel}\n\t\t\t// Identifies the element as a button widget.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n\t\t\trole=\"button\"\n\t\t\t// Includes the element in the tab sequence.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n\t\t\ttabIndex={disabled ? -1 : 0}\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t\tdata-reach-listbox-button=\"\"\n\t\t\tid={id}\n\t\t\tonKeyDown={composeEventHandlers(onKeyDown, handleKeyDown)}\n\t\t\tonMouseDown={composeEventHandlers(onMouseDown, handleMouseDown)}\n\t\t\tonMouseUp={composeEventHandlers(onMouseUp, handleMouseUp)}\n\t\t>\n\t\t\t{label}\n\t\t\t{arrow && <ListboxArrow>{isBoolean(arrow) ? null : arrow}</ListboxArrow>}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"span\", ListboxButtonProps>;\n\nListboxButtonImpl.displayName = \"ListboxButton\";\n\nconst ListboxButton = React.memo(\n\tListboxButtonImpl\n) as Polymorphic.MemoComponent<\"span\", ListboxButtonProps>;\n\n/**\n * @see Docs https://reach.tech/listbox#listboxbutton-props\n */\ninterface ListboxButtonProps {\n\t/**\n\t * Renders a text string or React node to represent an arrow inside the\n\t * button.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxbutton-arrow\n\t */\n\tarrow?: React.ReactNode | boolean;\n\t/**\n\t * A render function or React node to to render the Listbox button's inner\n\t * content.\n\t *\n\t * By default, the button will display the text label of the selected option\n\t * as its inner content. This label can be pulled from the option's inner\n\t * text content or explicitly provided to the ListboxOption component via the\n\t * label prop. If you want to render the button differently from its default,\n\t * you must pass children.\n\t *\n\t * It's important to note that the ListboxButton's default inner content\n\t * cannot be server-side rendered. On the initial render, the button has no\n\t * contextual information about the available options in a Listbox. As each\n\t * ListboxOption is rendered, it is registered in a context object and updated\n\t * at the top of the Listbox tree, which evaluates the options and their props\n\t * to determine which option is selectable and which label to display inside\n\t * the button. If you need the inner content of the button on the first render\n\t * you must control the listbox's state and keep its options' values and\n\t * labels in data at the top of the tree, and render the button directly via\n\t * children.\n\t *\n\t * @example\n\t * let options = { one: 'One option', two: 'Another option' }\n\t * let [value, setValue] = React.useState(options.one)\n\t * return (\n\t *   <ListboxInput>\n\t *     <ListboxButton>{options[value]}</ListboxButton>\n\t *     <ListboxPopover>\n\t *       <ListboxList>\n\t *         {Object.keys(options).map(option => (\n\t *           <ListboxOption key={option} value={option} label={options[option]}>\n\t *             {options[option]}\n\t *           </ListboxOption>\n\t *         ))}\n\t *       </ListboxList>\n\t *     </ListboxPopover>\n\t *   </ListboxInput>\n\t * )\n\t */\n\tchildren?:\n\t\t| React.ReactNode\n\t\t| ((props: {\n\t\t\t\tvalue: ListboxValue | null;\n\t\t\t\tlabel: string;\n\t\t\t\tisExpanded: boolean;\n\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\texpanded: boolean;\n\t\t  }) => React.ReactNode);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxArrow\n *\n * A wrapper component for an arrow to display in the `ListboxButton`\n *\n * @see Docs https://reach.tech/listbox#listboxarrow\n */\nconst ListboxArrowImpl = React.forwardRef(function ListboxArrow(\n\t{ as: Comp = \"span\", children, ...props },\n\tforwardedRef\n) {\n\tlet { isExpanded } = React.useContext(ListboxContext);\n\treturn (\n\t\t<Comp\n\t\t\t// The arrow provides no semantic value and its inner content should be\n\t\t\t// hidden from the accessibility tree\n\t\t\taria-hidden\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\tdata-reach-listbox-arrow=\"\"\n\t\t\tdata-expanded={isExpanded ? \"\" : undefined}\n\t\t>\n\t\t\t{isFunction(children)\n\t\t\t\t? children({\n\t\t\t\t\t\tisExpanded,\n\t\t\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\t\t\texpanded: isExpanded,\n\t\t\t\t  })\n\t\t\t\t: children || \"▼\"}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"span\", ListboxArrowProps>;\n\nListboxArrowImpl.displayName = \"ListboxArrow\";\n\nconst ListboxArrow = React.memo(ListboxArrowImpl) as Polymorphic.MemoComponent<\n\t\"span\",\n\tListboxArrowProps\n>;\n\n/**\n * @see Docs https://reach.tech/listbox#listboxarrow-props\n */\ninterface ListboxArrowProps {\n\t/**\n\t * Children to render as the listbox button's arrow. This can be a render\n\t * function that accepts the listbox's expanded state as an argument.\n\t */\n\tchildren?:\n\t\t| React.ReactNode\n\t\t| ((props: {\n\t\t\t\tisExpanded: boolean;\n\t\t\t\t// TODO: Remove in 1.0\n\t\t\t\texpanded: boolean;\n\t\t  }) => React.ReactNode);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxPopover\n *\n * The popover containing the list of options.\n *\n * @see Docs https://reach.tech/listbox#listboxpopover\n */\nconst ListboxPopoverImpl = React.forwardRef(function ListboxPopover(\n\t{\n\t\tas: Comp = \"div\",\n\t\tposition = positionMatchWidth,\n\t\tonBlur,\n\t\tonKeyDown,\n\t\tonMouseUp,\n\t\tportal = true,\n\t\tunstable_observableRefs,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet { isExpanded, buttonRef, popoverRef, send } =\n\t\tReact.useContext(ListboxContext);\n\tlet ref = useComposedRefs(popoverRef, forwardedRef);\n\n\tlet handleKeyDown = useKeyDown();\n\n\tfunction handleMouseUp() {\n\t\tsend({\n\t\t\ttype: ListboxEvents.ListMouseUp,\n\t\t});\n\t}\n\n\tlet commonProps = {\n\t\thidden: !isExpanded,\n\t\ttabIndex: -1,\n\t\t...props,\n\t\tref,\n\t\t\"data-reach-listbox-popover\": \"\",\n\t\tonMouseUp: composeEventHandlers(onMouseUp, handleMouseUp),\n\t\tonBlur: composeEventHandlers(onBlur, handleBlur),\n\t\tonKeyDown: composeEventHandlers(onKeyDown, handleKeyDown),\n\t};\n\n\tfunction handleBlur(event: React.FocusEvent) {\n\t\tlet { nativeEvent } = event;\n\t\trequestAnimationFrame(() => {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.Blur,\n\t\t\t\trelatedTarget: nativeEvent.relatedTarget || nativeEvent.target,\n\t\t\t});\n\t\t});\n\t}\n\n\treturn portal ? (\n\t\t<Popover\n\t\t\t{...commonProps}\n\t\t\tas={Comp}\n\t\t\ttargetRef={buttonRef as any}\n\t\t\tposition={position}\n\t\t\tunstable_observableRefs={unstable_observableRefs}\n\t\t\tunstable_skipInitialPortalRender\n\t\t/>\n\t) : (\n\t\t<Comp {...commonProps} />\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", ListboxPopoverProps>;\n\nListboxPopoverImpl.displayName = \"ListboxPopover\";\n\nconst ListboxPopover = React.memo(\n\tListboxPopoverImpl\n) as Polymorphic.MemoComponent<\"div\", ListboxPopoverProps>;\n\n/**\n * @see Docs https://reach.tech/listbox#listboxpopover-props\n */\ninterface ListboxPopoverProps {\n\t/**\n\t * `ListboxPopover` expects to receive `ListboxList` as its children.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxpopover-children\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * Whether or not the popover should be rendered inside a portal. Defaults to\n\t * `true`\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxpopover-portal\n\t */\n\tportal?: boolean;\n\t/**\n\t * The positioning function for the popover.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxpopover-position\n\t */\n\tposition?: PopoverProps[\"position\"];\n\tunstable_observableRefs?: PopoverProps[\"unstable_observableRefs\"];\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxList\n *\n * The list containing all listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxlist\n */\nconst ListboxList = React.forwardRef(function ListboxList(\n\t{ as: Comp = \"ul\", ...props },\n\tforwardedRef\n) {\n\tlet {\n\t\tlistRef,\n\t\tariaLabel,\n\t\tariaLabelledBy,\n\t\tisExpanded,\n\t\tlistboxId,\n\t\tstateData: { value, navigationValue },\n\t} = React.useContext(ListboxContext);\n\tlet ref = useComposedRefs(forwardedRef, listRef);\n\n\treturn (\n\t\t<Comp\n\t\t\t// Tells assistive technologies which of the options, if any, is\n\t\t\t// visually indicated as having keyboard focus. DOM focus remains on the\n\t\t\t// `ul` element and the idref specified for `aria-activedescendant`\n\t\t\t// refers to the `li` element that is visually styled as focused. When\n\t\t\t// navigation keys, such as `Down Arrow`, are pressed, the JavaScript\n\t\t\t// changes the value.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n\t\t\taria-activedescendant={useOptionId(isExpanded ? navigationValue : value)}\n\t\t\t// If the listbox is not part of another widget, then it has a visible\n\t\t\t// label referenced by `aria-labelledby` on the element with role\n\t\t\t// `listbox`.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n\t\t\t// If an `aria-label` is passed, we should skip `aria-labelledby` to\n\t\t\t// avoid confusion.\n\t\t\taria-labelledby={ariaLabel ? undefined : ariaLabelledBy}\n\t\t\taria-label={ariaLabel}\n\t\t\t// An element that contains or owns all the listbox options has role\n\t\t\t// listbox.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n\t\t\trole=\"listbox\"\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n\t\t\ttabIndex={-1}\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t\tdata-reach-listbox-list=\"\"\n\t\t\tid={makeId(\"listbox\", listboxId)}\n\t\t/>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"ul\", ListboxListProps>;\n\nListboxList.displayName = \"ListboxList\";\n\n/**\n * @see Docs https://reach.tech/listbox#listboxlist-props\n */\ninterface ListboxListProps {}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxOption\n *\n * A selectable option for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxoption\n */\nconst ListboxOption = React.forwardRef(function ListboxOption(\n\t{\n\t\tas: Comp = \"li\",\n\t\tchildren,\n\t\tdisabled,\n\t\tindex: indexProp,\n\t\tlabel: labelProp,\n\t\tonClick,\n\t\tonMouseDown,\n\t\tonMouseEnter,\n\t\tonMouseLeave,\n\t\tonMouseMove,\n\t\tonMouseUp,\n\t\tonTouchStart,\n\t\tvalue,\n\t\t...props\n\t},\n\tforwardedRef\n) {\n\tlet {\n\t\thighlightedOptionRef,\n\t\tselectedOptionRef,\n\t\tsend,\n\t\tisExpanded,\n\t\tonValueChange,\n\t\tstate,\n\t\tstateData: { value: listboxValue, navigationValue },\n\t} = React.useContext(ListboxContext);\n\n\tlet [labelState, setLabel] = React.useState(labelProp);\n\tlet label = labelProp || labelState || \"\";\n\n\tlet ownRef = React.useRef<HTMLElement | null>(null);\n\tlet [element, handleRefSet] = useStatefulRefValue(ownRef, null);\n\tlet descendant = React.useMemo(() => {\n\t\treturn {\n\t\t\telement,\n\t\t\tvalue,\n\t\t\tlabel,\n\t\t\tdisabled: !!disabled,\n\t\t};\n\t}, [disabled, element, label, value]);\n\tuseDescendant(descendant, ListboxDescendantContext, indexProp);\n\n\t// After the ref is mounted to the DOM node, we check to see if we have an\n\t// explicit label prop before looking for the node's textContent for\n\t// typeahead functionality.\n\tlet getLabelFromDomNode = React.useCallback(\n\t\t(node: HTMLElement) => {\n\t\t\tif (!labelProp && node) {\n\t\t\t\tsetLabel((prevState) => {\n\t\t\t\t\tif (node.textContent && prevState !== node.textContent) {\n\t\t\t\t\t\treturn node.textContent;\n\t\t\t\t\t}\n\t\t\t\t\treturn prevState || \"\";\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[labelProp]\n\t);\n\n\tlet isHighlighted = navigationValue ? navigationValue === value : false;\n\tlet isSelected = listboxValue === value;\n\n\tlet ref = useComposedRefs(\n\t\tgetLabelFromDomNode,\n\t\tforwardedRef,\n\t\thandleRefSet,\n\t\tisSelected ? selectedOptionRef : null,\n\t\tisHighlighted ? highlightedOptionRef : null\n\t);\n\n\tfunction handleMouseEnter() {\n\t\tsend({\n\t\t\ttype: ListboxEvents.OptionMouseEnter,\n\t\t\tvalue,\n\t\t\tdisabled: !!disabled,\n\t\t});\n\t}\n\n\tfunction handleTouchStart() {\n\t\tsend({\n\t\t\ttype: ListboxEvents.OptionTouchStart,\n\t\t\tvalue,\n\t\t\tdisabled: !!disabled,\n\t\t});\n\t}\n\n\tfunction handleMouseLeave() {\n\t\tsend({ type: ListboxEvents.ClearNavSelection });\n\t}\n\n\tfunction handleMouseDown(event: React.MouseEvent) {\n\t\t// Prevent blur event from firing and bubbling to the popover\n\t\tif (!isRightClick(event.nativeEvent)) {\n\t\t\tevent.preventDefault();\n\t\t\tsend({ type: ListboxEvents.OptionMouseDown });\n\t\t}\n\t}\n\n\tfunction handleMouseUp(event: React.MouseEvent) {\n\t\tif (!isRightClick(event.nativeEvent)) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.OptionMouseUp,\n\t\t\t\tvalue,\n\t\t\t\tcallback: onValueChange,\n\t\t\t\tdisabled: !!disabled,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction handleClick(event: React.MouseEvent) {\n\t\t// Generally an option will be selected on mouseup, but in case this isn't\n\t\t// handled correctly by the device (whether because it's a touch/pen or\n\t\t// virtual click event) we want to handle selection on a full click event\n\t\t// just in case. This should address issues with screenreader selection,\n\t\t// but this needs more robust testing.\n\t\tif (!isRightClick(event.nativeEvent)) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.OptionClick,\n\t\t\t\tvalue,\n\t\t\t\tcallback: onValueChange,\n\t\t\t\tdisabled: !!disabled,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction handleMouseMove() {\n\t\t// We don't really *need* these guards since we put all of our transition\n\t\t// logic in the state machine, but in this case it seems wise not to\n\t\t// needlessly run our transitions every time the user's mouse moves. Seems\n\t\t// like a lot. 🙃\n\t\tif (state === ListboxStates.Open || navigationValue !== value) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.OptionMouseMove,\n\t\t\t\tvalue,\n\t\t\t\tdisabled: !!disabled,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn (\n\t\t<Comp\n\t\t\t// In a single-select listbox, the selected option has `aria-selected`\n\t\t\t// set to `true`.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n\t\t\taria-selected={(isExpanded ? isHighlighted : isSelected) || undefined}\n\t\t\t// Applicable to all host language elements regardless of whether a\n\t\t\t// `role` is applied.\n\t\t\t// https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n\t\t\taria-disabled={disabled || undefined}\n\t\t\t// Each option in the listbox has role `option` and is a DOM descendant\n\t\t\t// of the element with role `listbox`.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n\t\t\trole=\"option\"\n\t\t\t{...props}\n\t\t\tref={ref}\n\t\t\tid={useOptionId(value)}\n\t\t\tdata-reach-listbox-option=\"\"\n\t\t\tdata-current-nav={isHighlighted ? \"\" : undefined}\n\t\t\tdata-current-selected={isSelected ? \"\" : undefined}\n\t\t\tdata-label={label}\n\t\t\tdata-value={value}\n\t\t\tonClick={composeEventHandlers(onClick, handleClick)}\n\t\t\tonMouseDown={composeEventHandlers(onMouseDown, handleMouseDown)}\n\t\t\tonMouseEnter={composeEventHandlers(onMouseEnter, handleMouseEnter)}\n\t\t\tonMouseLeave={composeEventHandlers(onMouseLeave, handleMouseLeave)}\n\t\t\tonMouseMove={composeEventHandlers(onMouseMove, handleMouseMove)}\n\t\t\tonMouseUp={composeEventHandlers(onMouseUp, handleMouseUp)}\n\t\t\tonTouchStart={composeEventHandlers(onTouchStart, handleTouchStart)}\n\t\t>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"li\", ListboxOptionProps>;\n\nListboxOption.displayName = \"ListboxOption\";\n\n/**\n * @see Docs https://reach.tech/listbox#listboxoption-props\n */\ninterface ListboxOptionProps {\n\t/**\n\t * The option's value. This will be passed into a hidden input field for use\n\t * in forms.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxoption-value\n\t */\n\tvalue: ListboxValue;\n\t/**\n\t * TODO: Document this!\n\t */\n\tindex?: number;\n\t/**\n\t * The option's human-readable label. This prop is optional but highly\n\t * encouraged if your option has multiple text nodes that may or may not\n\t * correlate with the intended value. It is also useful if the inner text node\n\t * begins with a character other than a readable letter (like an emoji or\n\t * symbol) so that typeahead works as expected for the user.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxoption-label\n\t */\n\tlabel?: string;\n\t/**\n\t * Whether or not the option is disabled from selection and navigation.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxoption-disabled\n\t */\n\tdisabled?: boolean;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroup\n *\n * A group of related listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxgroup\n */\nconst ListboxGroup = React.forwardRef(function ListboxGroup(\n\t{ as: Comp = \"div\", label, children, ...props },\n\tforwardedRef\n) {\n\tlet { listboxId } = React.useContext(ListboxContext);\n\tlet labelId = makeId(\"label\", useId(props.id), listboxId);\n\treturn (\n\t\t<ListboxGroupContext.Provider value={{ labelId }}>\n\t\t\t<Comp\n\t\t\t\t// Refers to the element containing the option group label\n\t\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n\t\t\t\taria-labelledby={labelId}\n\t\t\t\t// Identifies a group of related options\n\t\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n\t\t\t\trole=\"group\"\n\t\t\t\t{...props}\n\t\t\t\tdata-reach-listbox-group=\"\"\n\t\t\t\tref={forwardedRef}\n\t\t\t>\n\t\t\t\t{label && <ListboxGroupLabel>{label}</ListboxGroupLabel>}\n\t\t\t\t{children}\n\t\t\t</Comp>\n\t\t</ListboxGroupContext.Provider>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", ListboxGroupProps>;\n\nListboxGroup.displayName = \"ListboxGroup\";\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\ninterface ListboxGroupProps {\n\t/**\n\t * The text label to use for the listbox group. This can be omitted if a\n\t * group contains a `ListboxGroupLabel` component. The label should always\n\t * be human-readable.\n\t *\n\t * @see Docs https://reach.tech/listbox#listboxgroup-label\n\t */\n\tlabel?: React.ReactNode;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroupLabel\n *\n * @see Docs https://reach.tech/listbox#listboxgrouplabel\n */\nconst ListboxGroupLabel = React.forwardRef(function ListboxGroupLabel(\n\t{ as: Comp = \"span\", ...props },\n\tforwardedRef\n) {\n\tlet { labelId } = React.useContext(ListboxGroupContext);\n\treturn (\n\t\t<Comp\n\t\t\t// See examples\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n\t\t\trole=\"presentation\"\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\tdata-reach-listbox-group-label=\"\"\n\t\t\tid={labelId}\n\t\t/>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"span\", ListboxGroupLabelProps>;\n\nListboxGroupLabel.displayName = \"ListboxGroupLabel\";\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\ninterface ListboxGroupLabelProps {}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Listbox` component to its descendants.\n *\n * @see Docs https://reach.tech/listbox#uselistboxcontext\n */\nfunction useListboxContext(): ListboxContextValue {\n\tlet {\n\t\thighlightedOptionRef,\n\t\tselectedOptionRef,\n\t\tlistboxId,\n\t\tlistboxValueLabel,\n\t\tisExpanded,\n\t\tstateData: { value },\n\t} = React.useContext(ListboxContext);\n\treturn React.useMemo(\n\t\t() => ({\n\t\t\tid: listboxId,\n\t\t\tisExpanded,\n\t\t\tselectedOptionRef: selectedOptionRef,\n\t\t\thighlightedOptionRef: highlightedOptionRef,\n\t\t\tvalue,\n\t\t\tvalueLabel: listboxValueLabel,\n\t\t}),\n\t\t[\n\t\t\tlistboxId,\n\t\t\tisExpanded,\n\t\t\tvalue,\n\t\t\tlistboxValueLabel,\n\t\t\tselectedOptionRef,\n\t\t\thighlightedOptionRef,\n\t\t]\n\t);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isListboxExpanded(state: string) {\n\treturn [\n\t\tListboxStates.Navigating,\n\t\tListboxStates.Open,\n\t\tListboxStates.Dragging,\n\t\tListboxStates.Interacting,\n\t].includes(state as ListboxStates);\n}\n\nfunction useKeyDown() {\n\tlet {\n\t\tsend,\n\t\tdisabled: listboxDisabled,\n\t\tonValueChange,\n\t\tstateData: { navigationValue, typeaheadQuery },\n\t} = React.useContext(ListboxContext);\n\tlet options = useDescendants(ListboxDescendantContext);\n\tlet stableOnValueChange = useStableCallback(onValueChange);\n\n\tReact.useEffect(() => {\n\t\tif (typeaheadQuery) {\n\t\t\tsend({\n\t\t\t\ttype: ListboxEvents.UpdateAfterTypeahead,\n\t\t\t\tquery: typeaheadQuery,\n\t\t\t\tcallback: stableOnValueChange,\n\t\t\t});\n\t\t}\n\t\tlet timeout = window.setTimeout(() => {\n\t\t\tif (typeaheadQuery != null) {\n\t\t\t\tsend({ type: ListboxEvents.ClearTypeahead });\n\t\t\t}\n\t\t}, 1000);\n\t\treturn () => {\n\t\t\twindow.clearTimeout(timeout);\n\t\t};\n\t}, [stableOnValueChange, send, typeaheadQuery]);\n\n\tlet index = options.findIndex(({ value }) => value === navigationValue);\n\n\tlet handleKeyDown = composeEventHandlers(\n\t\tfunction (event: React.KeyboardEvent) {\n\t\t\tlet { key } = event;\n\t\t\tlet isSearching = isString(key) && key.length === 1;\n\t\t\tlet navOption = options.find(\n\t\t\t\t(option) => option.value === navigationValue\n\t\t\t);\n\t\t\tswitch (key) {\n\t\t\t\tcase \"Enter\":\n\t\t\t\t\tsend({\n\t\t\t\t\t\ttype: ListboxEvents.KeyDownEnter,\n\t\t\t\t\t\tvalue: navigationValue,\n\t\t\t\t\t\tcallback: onValueChange,\n\t\t\t\t\t\tdisabled: !!(navOption?.disabled || listboxDisabled),\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\tcase \" \":\n\t\t\t\t\t// Prevent browser from scrolling down\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tsend({\n\t\t\t\t\t\ttype: ListboxEvents.KeyDownSpace,\n\t\t\t\t\t\tvalue: navigationValue,\n\t\t\t\t\t\tcallback: onValueChange,\n\t\t\t\t\t\tdisabled: !!(navOption?.disabled || listboxDisabled),\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\tcase \"Escape\":\n\t\t\t\t\tsend({ type: ListboxEvents.KeyDownEscape });\n\t\t\t\t\treturn;\n\t\t\t\tcase \"Tab\":\n\t\t\t\t\tlet eventType = event.shiftKey\n\t\t\t\t\t\t? ListboxEvents.KeyDownShiftTab\n\t\t\t\t\t\t: ListboxEvents.KeyDownTab;\n\t\t\t\t\tsend({ type: eventType });\n\t\t\t\t\treturn;\n\t\t\t\tdefault:\n\t\t\t\t\tif (isSearching) {\n\t\t\t\t\t\tsend({\n\t\t\t\t\t\t\ttype: ListboxEvents.KeyDownSearch,\n\t\t\t\t\t\t\tquery: key,\n\t\t\t\t\t\t\tdisabled: listboxDisabled,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\n\t\tuseDescendantKeyDown(ListboxDescendantContext, {\n\t\t\tcurrentIndex: index,\n\t\t\torientation: \"vertical\",\n\t\t\tkey: \"index\",\n\t\t\trotate: true,\n\t\t\tfilter: (option) => !option.disabled,\n\t\t\tcallback(nextIndex: number) {\n\t\t\t\tsend({\n\t\t\t\t\ttype: ListboxEvents.KeyDownNavigate,\n\t\t\t\t\tvalue: options[nextIndex].value,\n\t\t\t\t\tdisabled: listboxDisabled,\n\t\t\t\t});\n\t\t\t},\n\t\t})\n\t);\n\n\treturn handleKeyDown;\n}\n\nfunction useOptionId(value: ListboxValue | null) {\n\tlet { listboxId } = React.useContext(ListboxContext);\n\treturn value ? makeId(`option-${value}`, listboxId) : undefined;\n}\n\nfunction popoverContainsEventTarget(\n\tpopover: HTMLElement | null,\n\ttarget: HTMLElement | EventTarget | null\n) {\n\treturn !!(popover && popover.contains(target as HTMLElement));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype ListboxValue = string;\n\ntype ListboxDescendant = Descendant<HTMLElement> & {\n\tvalue: ListboxValue;\n\tlabel: string;\n\tdisabled: boolean;\n};\n\ninterface ListboxContextValue {\n\tid: string | undefined;\n\tisExpanded: boolean;\n\thighlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n\tselectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n\tvalue: ListboxValue | null;\n\tvalueLabel: string | null;\n}\n\ninterface InternalListboxContextValue {\n\tbuttonRef: React.RefObject<ListboxNodeRefs[\"button\"]>;\n\tlistRef: React.RefObject<ListboxNodeRefs[\"list\"]>;\n\tpopoverRef: React.RefObject<ListboxNodeRefs[\"popover\"]>;\n\tselectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n\thighlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n\tsend: StateMachine.Service<\n\t\tListboxStateData,\n\t\tDistributiveOmit<ListboxEvent, \"refs\">\n\t>[\"send\"];\n\n\tariaLabel?: string;\n\tariaLabelledBy?: string;\n\tisExpanded: boolean;\n\tdisabled: boolean;\n\tlistboxId: string;\n\tlistboxValueLabel: string | null;\n\tonValueChange(newValue: ListboxValue): void;\n\tstate: ListboxStates;\n\tstateData: ListboxStateData;\n}\n\ninterface ListboxGroupContextValue {\n\tlabelId: string;\n}\n\nfunction useControlledStateSync<T>(\n\tcontrolPropValue: T | undefined,\n\tinternalValue: T,\n\tsend: any\n) {\n\tlet { current: isControlled } = React.useRef(controlPropValue != null);\n\tif (isControlled && controlPropValue !== internalValue) {\n\t\tsend();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type {\n\tListboxArrowProps,\n\tListboxButtonProps,\n\tListboxContextValue,\n\tListboxDescendant,\n\tListboxGroupLabelProps,\n\tListboxGroupProps,\n\tListboxInputProps,\n\tListboxListProps,\n\tListboxOptionProps,\n\tListboxPopoverProps,\n\tListboxProps,\n\tListboxValue,\n};\nexport {\n\tListbox,\n\tListboxArrow,\n\tListboxButton,\n\tListboxGroup,\n\tListboxGroupLabel,\n\tListboxInput,\n\tListboxList,\n\tListboxOption,\n\tListboxPopover,\n\tuseListboxContext,\n};\n","import { assign } from \"@reach/machine\";\nimport { getOwnerDocument } from \"@reach/utils\";\n\nimport type { ListboxDescendant, ListboxValue } from \"./reach-listbox\";\nimport type { MachineEventWithRefs, StateMachine } from \"@reach/machine\";\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\nexport enum ListboxStates {\n\t// Resting/closed state.\n\tIdle = \"IDLE\",\n\n\t// Listbox is open but the user is not yet navigating.\n\tOpen = \"OPEN\",\n\n\t// The user is navigating the list\n\tNavigating = \"NAVIGATING\",\n\n\t// The user has moused-down but hasn't made a selection yet\n\tDragging = \"DRAGGING\",\n\n\t// The user is interacting with arbitrary elements inside the popover\n\tInteracting = \"INTERACTING\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\nexport enum ListboxEvents {\n\tButtonMouseDown = \"BUTTON_MOUSE_DOWN\",\n\tButtonMouseUp = \"BUTTON_MOUSE_UP\",\n\tBlur = \"BLUR\",\n\tClearNavSelection = \"CLEAR_NAV_SELECTION\",\n\tClearTypeahead = \"CLEAR_TYPEAHEAD\",\n\tGetDerivedData = \"GET_DERIVED_DATA\",\n\tKeyDownEscape = \"KEY_DOWN_ESCAPE\",\n\tKeyDownEnter = \"KEY_DOWN_ENTER\",\n\tKeyDownSpace = \"KEY_DOWN_SPACE\",\n\tKeyDownNavigate = \"KEY_DOWN_NAVIGATE\",\n\tKeyDownSearch = \"KEY_DOWN_SEARCH\",\n\tKeyDownTab = \"KEY_DOWN_TAB\",\n\tKeyDownShiftTab = \"KEY_DOWN_SHIFT_TAB\",\n\n\tOptionTouchStart = \"OPTION_TOUCH_START\",\n\tOptionMouseMove = \"OPTION_MOUSE_MOVE\",\n\tOptionMouseEnter = \"OPTION_MOUSE_ENTER\",\n\tOptionMouseDown = \"OPTION_MOUSE_DOWN\",\n\tOptionMouseUp = \"OPTION_MOUSE_UP\",\n\tOptionClick = \"OPTION_CLICK\",\n\n\tListMouseUp = \"LIST_MOUSE_UP\",\n\n\t// WIP: Simplify and consolidate events\n\t// TODO: Use a separate machine to deal with states to determine press events\n\tOptionPress = \"OPTION_PRESS\",\n\n\tOutsideMouseDown = \"OUTSIDE_MOUSE_DOWN\",\n\tOutsideMouseUp = \"OUTSIDE_MOUSE_UP\",\n\n\t// Uncontrolled value changes come from specific events (click, key, etc.)\n\t// ValueChange > Value change may have come from somewhere else\n\tValueChange = \"VALUE_CHANGE\",\n\tResetValue = \"RESET_VALUE\",\n\n\tPopoverPointerDown = \"POPOVER_POINTER_DOWN\",\n\tPopoverPointerUp = \"POPOVER_POINTER_UP\",\n\tUpdateAfterTypeahead = \"UPDATE_AFTER_TYPEAHEAD\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions and conditions\n\nlet clearNavigationValue = assign<ListboxStateData>({\n\tnavigationValue: null,\n});\n\nlet clearTypeahead = assign<ListboxStateData>({\n\ttypeaheadQuery: null,\n});\n\nlet assignValue = assign<ListboxStateData, any>({\n\tvalue: (_, event) => event.value,\n});\n\nlet resetValue = assign<ListboxStateData, any>({\n\tvalue: (data, event) => data.initialValue,\n});\n\nlet navigate = assign<ListboxStateData, any>({\n\tnavigationValue: (data, event) => event.value,\n});\n\nlet navigateFromCurrentValue = assign<ListboxStateData, any>({\n\tnavigationValue: (data) => {\n\t\t// Before we navigate based on the current value, we need to make sure the\n\t\t// current value is selectable. If not, we should instead navigate to the\n\t\t// first selectable option.\n\t\tlet selected = findOptionFromValue(data.value, data.options);\n\t\tif (selected && !selected.disabled) {\n\t\t\treturn data.value;\n\t\t} else {\n\t\t\treturn data.options.find((option) => !option.disabled)?.value || null;\n\t\t}\n\t},\n});\n\nfunction listboxLostFocus(data: ListboxStateData, event: ListboxEvent) {\n\tif (event.type === ListboxEvents.Blur) {\n\t\tlet { list, popover } = event.refs;\n\t\tlet { relatedTarget } = event;\n\n\t\tlet ownerDocument = getOwnerDocument(popover);\n\n\t\treturn !!(\n\t\t\townerDocument?.activeElement !== list &&\n\t\t\tpopover &&\n\t\t\t!popover.contains(\n\t\t\t\t(relatedTarget as Element) || ownerDocument?.activeElement\n\t\t\t)\n\t\t);\n\t}\n\treturn false;\n}\n\nfunction clickedOutsideOfListbox(data: ListboxStateData, event: ListboxEvent) {\n\tif (\n\t\tevent.type === ListboxEvents.OutsideMouseDown ||\n\t\tevent.type === ListboxEvents.OutsideMouseUp\n\t) {\n\t\tlet { button, popover } = event.refs;\n\t\tlet { relatedTarget } = event;\n\n\t\t// Close the popover IF:\n\t\treturn !!(\n\t\t\t// clicked element is not the button\n\t\t\t(\n\t\t\t\trelatedTarget !== button &&\n\t\t\t\t// clicked element is not inside the button\n\t\t\t\tbutton &&\n\t\t\t\t!button.contains(relatedTarget as Element) &&\n\t\t\t\t// clicked element is not inside the popover\n\t\t\t\tpopover &&\n\t\t\t\t!popover.contains(relatedTarget as Element)\n\t\t\t)\n\t\t);\n\t}\n\treturn false;\n}\n\nfunction optionIsActive(data: ListboxStateData, event: any) {\n\treturn !!data.options.find((option) => option.value === data.navigationValue);\n}\n\nfunction shouldNavigate(data: ListboxStateData, event: any) {\n\tlet { popover, list } = event.refs;\n\tlet { relatedTarget } = event;\n\t// When a blur event happens, we want to move to Navigating state unless the\n\t// user is interacting with elements inside the popover...\n\tif (\n\t\tpopover &&\n\t\trelatedTarget &&\n\t\tpopover.contains(relatedTarget as Element) &&\n\t\trelatedTarget !== list\n\t) {\n\t\treturn false;\n\t}\n\t// ...otherwise, just make sure the next option is selectable\n\treturn optionIsActive(data, event);\n}\n\nfunction focusList(data: ListboxStateData, event: any) {\n\trequestAnimationFrame(() => {\n\t\tevent.refs.list && event.refs.list.focus();\n\t});\n}\n\nfunction focusButton(data: ListboxStateData, event: any) {\n\tevent.refs.button && event.refs.button.focus();\n}\n\nfunction listboxIsNotDisabled(data: ListboxStateData, event: any) {\n\treturn !event.disabled;\n}\n\nfunction listboxIsNotControlled(data: ListboxStateData, event: ListboxEvent) {\n\treturn \"isControlled\" in event ? !event.isControlled : false;\n}\n\nfunction optionIsNavigable(data: ListboxStateData, event: ListboxEvent) {\n\tif (event.type === ListboxEvents.OptionTouchStart) {\n\t\tif (event && event.disabled) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction optionIsSelectable(data: ListboxStateData, event: ListboxEvent) {\n\tif (\"disabled\" in event && event.disabled) {\n\t\treturn false;\n\t}\n\tif (\"value\" in event) {\n\t\treturn event.value != null;\n\t}\n\treturn data.navigationValue != null;\n}\n\nfunction selectOption(data: ListboxStateData, event: any) {\n\tevent.callback && event.callback(event.value);\n}\n\nfunction submitForm(data: ListboxStateData, event: any) {\n\tif (event.type !== ListboxEvents.KeyDownEnter) {\n\t\treturn;\n\t}\n\n\t// So this one is a little weird, but here's what we're doing.\n\t// When a user presses Enter in the context of a form, the form\n\t// should submit. Now I know you're probably thinking:\n\t//\n\t//      \"Aha! I've got it!\"\n\t//          > inputNode.form.submit()\n\t//      ** cracks knuckles ** \"Phew. My work here is done.\"\n\t//\n\t// But alas, we are not so lucky. What's really happening when a\n\t// user presses enter in a normal form field is that the browser\n\t// looks at the form the input is in, then looks for the first\n\t// button or input in that form where its type property is `submit`,\n\t// then it triggers a click event on that button. COOL, CARRY ON.\n\t//\n\t// If we were to fire inputNode.form.submit(), this would bypass any\n\t// onSubmit handler in the form and just do what the browser\n\t// normally does when you submit a form and trigger a page refresh.\n\t// No bueno. So we do what the browser does and just go on a duck\n\t// hunt for the first submit button in the form and we click that\n\t// sucker.\n\tlet { hiddenInput } = event.refs;\n\tif (hiddenInput && hiddenInput.form) {\n\t\tlet submitButton = hiddenInput.form.querySelector(\n\t\t\t\"button:not([type]),[type='submit']\"\n\t\t);\n\t\tsubmitButton && (submitButton as any).click();\n\t}\n}\n\nlet setTypeahead = assign<ListboxStateData, any>({\n\ttypeaheadQuery: (data, event) => {\n\t\treturn (data.typeaheadQuery || \"\") + event.query;\n\t},\n});\n\nlet setValueFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n\tvalue: (data, event) => {\n\t\tif (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n\t\t\tlet match = findOptionFromTypeahead(data.options, event.query);\n\t\t\tif (match && !match.disabled) {\n\t\t\t\tevent.callback && event.callback(match.value);\n\t\t\t\treturn match.value;\n\t\t\t}\n\t\t}\n\t\treturn data.value;\n\t},\n});\n\nlet setNavSelectionFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n\tnavigationValue: (data, event) => {\n\t\tif (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n\t\t\tlet match = findOptionFromTypeahead(data.options, event.query);\n\t\t\tif (match && !match.disabled) {\n\t\t\t\treturn match.value;\n\t\t\t}\n\t\t}\n\t\treturn data.navigationValue;\n\t},\n});\n\nlet commonEvents = {\n\t[ListboxEvents.GetDerivedData]: {\n\t\tactions: assign<ListboxStateData, any>((ctx, event) => {\n\t\t\treturn {\n\t\t\t\t...ctx,\n\t\t\t\t...event.data,\n\t\t\t};\n\t\t}),\n\t},\n\t[ListboxEvents.ValueChange]: {\n\t\tactions: [assignValue, selectOption],\n\t},\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Initializer for our state machine.\n */\nexport const createMachineDefinition = ({\n\tvalue,\n}: {\n\tvalue: ListboxValue | null;\n}): StateMachine.Config<ListboxStateData, ListboxEvent, ListboxState> => ({\n\tid: \"listbox\",\n\tinitial: ListboxStates.Idle,\n\tcontext: {\n\t\t// Note: initialValue should never change. It is stored in context for\n\t\t// certain events.\n\t\tinitialValue: value,\n\t\tvalue,\n\t\toptions: [],\n\t\tnavigationValue: null,\n\t\ttypeaheadQuery: null,\n\t},\n\tstates: {\n\t\t[ListboxStates.Idle]: {\n\t\t\ton: {\n\t\t\t\t...commonEvents,\n\t\t\t\t[ListboxEvents.ButtonMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Open,\n\t\t\t\t\tactions: [navigateFromCurrentValue],\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSpace]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, focusList],\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSearch]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: setTypeahead,\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.UpdateAfterTypeahead]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [setValueFromTypeahead],\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ClearTypeahead]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownNavigate]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, clearTypeahead, focusList],\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEnter]: {\n\t\t\t\t\tactions: [submitForm],\n\t\t\t\t\tcond: listboxIsNotDisabled,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ResetValue]: {\n\t\t\t\t\tactions: [resetValue, selectOption],\n\t\t\t\t\tcond: listboxIsNotControlled,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t[ListboxStates.Interacting]: {\n\t\t\tentry: [clearNavigationValue],\n\t\t\ton: {\n\t\t\t\t...commonEvents,\n\t\t\t\t[ListboxEvents.ClearNavSelection]: {\n\t\t\t\t\tactions: [clearNavigationValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSpace]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ButtonMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t// When the user triggers a mouseDown event on the button, we call\n\t\t\t\t\t// event.preventDefault() because the browser will naturally send a\n\t\t\t\t\t// mouseup event and click, which will reopen the button (which we\n\t\t\t\t\t// don't want). As such, the click won't blur the open list or\n\t\t\t\t\t// re-focus the trigger, so we call `focusButton` to do that manually.\n\t\t\t\t\t// We could work around this with deferred transitions with xstate,\n\t\t\t\t\t// but @xstate/fsm currently doesn't support that feature and this\n\t\t\t\t\t// works good enough for the moment.\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEscape]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OutsideMouseDown]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OutsideMouseUp]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.KeyDownEnter]: ListboxStates.Interacting,\n\t\t\t\t[ListboxEvents.Blur]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: listboxLostFocus,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: shouldNavigate,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OptionTouchStart]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionClick]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionPress]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownNavigate]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead, focusList],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t[ListboxStates.Open]: {\n\t\t\ton: {\n\t\t\t\t...commonEvents,\n\t\t\t\t[ListboxEvents.ClearNavSelection]: {\n\t\t\t\t\tactions: [clearNavigationValue],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSpace]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ButtonMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEscape]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OutsideMouseDown]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OutsideMouseUp]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.Blur]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: listboxLostFocus,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: shouldNavigate,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.ButtonMouseUp]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ListMouseUp]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionTouchStart]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionClick]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionPress]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownNavigate]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSearch]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: setTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.UpdateAfterTypeahead]: {\n\t\t\t\t\tactions: [setNavSelectionFromTypeahead],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ClearTypeahead]: {\n\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseMove]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t\t\tactions: [navigate],\n\t\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\t[ListboxStates.Dragging]: {\n\t\t\ton: {\n\t\t\t\t...commonEvents,\n\t\t\t\t[ListboxEvents.ClearNavSelection]: {\n\t\t\t\t\tactions: [clearNavigationValue],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSpace]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ButtonMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEscape]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OutsideMouseDown]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OutsideMouseUp]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t\tactions: focusList,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: [clearTypeahead, focusList],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.Blur]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: listboxLostFocus,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: shouldNavigate,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.ButtonMouseUp]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionTouchStart]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionClick]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionPress]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownNavigate]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSearch]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: setTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.UpdateAfterTypeahead]: {\n\t\t\t\t\tactions: [setNavSelectionFromTypeahead],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ClearTypeahead]: {\n\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseMove]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tactions: [navigate],\n\t\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OptionMouseUp]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t[ListboxStates.Navigating]: {\n\t\t\ton: {\n\t\t\t\t...commonEvents,\n\t\t\t\t[ListboxEvents.ClearNavSelection]: {\n\t\t\t\t\tactions: [clearNavigationValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSpace]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ButtonMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownEscape]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [focusButton],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseDown]: {\n\t\t\t\t\ttarget: ListboxStates.Dragging,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OutsideMouseDown]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.OutsideMouseUp]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: clickedOutsideOfListbox,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: optionIsActive,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.Blur]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\t\tcond: listboxLostFocus,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tcond: shouldNavigate,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Interacting,\n\t\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[ListboxEvents.ButtonMouseUp]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigateFromCurrentValue, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionTouchStart]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionClick]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionPress]: {\n\t\t\t\t\ttarget: ListboxStates.Idle,\n\t\t\t\t\tactions: [assignValue, clearTypeahead, focusButton, selectOption],\n\t\t\t\t\tcond: optionIsSelectable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseEnter]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead],\n\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownNavigate]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: [navigate, clearTypeahead, focusList],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.KeyDownSearch]: {\n\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\tactions: setTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.UpdateAfterTypeahead]: {\n\t\t\t\t\tactions: [setNavSelectionFromTypeahead],\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.ClearTypeahead]: {\n\t\t\t\t\tactions: clearTypeahead,\n\t\t\t\t},\n\t\t\t\t[ListboxEvents.OptionMouseMove]: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t\tactions: [navigate],\n\t\t\t\t\t\tcond: optionIsNavigable,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: ListboxStates.Navigating,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t},\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction findOptionFromTypeahead(options: ListboxDescendant[], string = \"\") {\n\tif (!string) return null;\n\tconst found = options.find(\n\t\t(option) =>\n\t\t\t!option.disabled &&\n\t\t\toption.label &&\n\t\t\toption.label.toLowerCase().startsWith(string.toLowerCase())\n\t);\n\treturn found || null;\n}\n\nfunction findOptionFromValue(\n\tvalue: string | null | undefined,\n\toptions: ListboxDescendant[]\n) {\n\treturn value ? options.find((option) => option.value === value) : undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\n/**\n * Shared partial interface for all of our event objects.\n */\nexport interface ListboxEventBase extends MachineEventWithRefs {\n\trefs: ListboxNodeRefs;\n}\n\n/**\n * DOM nodes for all of the refs used in the listbox state machine.\n */\nexport type ListboxNodeRefs = {\n\tbutton: HTMLElement | null;\n\thiddenInput: HTMLInputElement | null;\n\tinput: HTMLElement | null;\n\tlist: HTMLElement | null;\n\tpopover: HTMLElement | null;\n\tselectedOption: HTMLElement | null;\n\thighlightedOption: HTMLElement | null;\n};\n\n/**\n * Event object for the listbox state machine.\n */\nexport type ListboxEvent = ListboxEventBase &\n\t(\n\t\t| {\n\t\t\t\ttype: ListboxEvents.Blur;\n\t\t\t\trelatedTarget: EventTarget | null;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OutsideMouseDown;\n\t\t\t\trelatedTarget: EventTarget | null;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OutsideMouseUp;\n\t\t\t\trelatedTarget: EventTarget | null;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.GetDerivedData;\n\t\t\t\tdata: Partial<ListboxStateData>;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ButtonMouseDown;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ButtonMouseUp;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ListMouseUp;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ClearNavSelection;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionTouchStart;\n\t\t\t\tvalue: ListboxValue;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionMouseEnter;\n\t\t\t\tvalue: ListboxValue;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionMouseMove;\n\t\t\t\tvalue: ListboxValue;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ValueChange;\n\t\t\t\tvalue: ListboxValue;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t  }\n\t\t| { type: ListboxEvents.ResetValue; isControlled: boolean }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownNavigate;\n\t\t\t\tvalue: ListboxValue | null;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownSearch;\n\t\t\t\tquery: string;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownEscape;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownEnter;\n\t\t\t\tvalue?: ListboxValue | null | undefined;\n\t\t\t\tdisabled?: boolean;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownSpace;\n\t\t\t\tvalue?: ListboxValue | null | undefined;\n\t\t\t\tdisabled?: boolean;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionMouseDown;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionMouseUp;\n\t\t\t\tvalue: ListboxValue | null | undefined;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionClick;\n\t\t\t\tvalue: ListboxValue | null | undefined;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.OptionPress;\n\t\t\t\tvalue: ListboxValue | null | undefined;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t\t\tdisabled: boolean;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownTab;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.KeyDownShiftTab;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.UpdateAfterTypeahead;\n\t\t\t\tquery: string;\n\t\t\t\tcallback?: ((newValue: ListboxValue) => void) | null | undefined;\n\t\t  }\n\t\t| {\n\t\t\t\ttype: ListboxEvents.ClearTypeahead;\n\t\t  }\n\t);\n\n/**\n * State object for the listbox state machine.\n */\nexport type ListboxState = {\n\tvalue: ListboxStates;\n\tcontext: ListboxStateData;\n};\n\nexport type ListboxStateData = {\n\tnavigationValue: ListboxValue | null;\n\ttypeaheadQuery: string | null;\n\tinitialValue: ListboxValue | null;\n\tvalue: ListboxValue | null;\n\toptions: ListboxDescendant[];\n};\n"],"mappings":"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","names":[]}