'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var core = require('@theme-ui/core');
var css = require('@theme-ui/css');

const useBreakpointIndex = (options = {}) => {
  const context = core.useThemeUI();
  const {
    defaultIndex = 0
  } = options;
  const breakpoints = context.theme && context.theme.breakpoints || css.defaultBreakpoints;

  if (typeof defaultIndex !== 'number') {
    throw new TypeError(`Default breakpoint index should be a number. Got: ${defaultIndex}, ${typeof defaultIndex}`);
  } else if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
    throw new RangeError(`Default breakpoint index out of range. Theme has ${breakpoints.length} breakpoints, got index ${defaultIndex}`);
  }

  const [value, setValue] = react.useState(defaultIndex);
  react.useEffect(() => {
    const getIndex = () => breakpoints.filter(bp => window.matchMedia(`screen and (min-width: ${bp})`).matches).length;

    const onResize = () => {
      const newValue = getIndex();

      if (value !== newValue) {
        setValue(newValue);
      }
    };

    onResize();
    window.addEventListener('resize', onResize);
    return () => window.removeEventListener('resize', onResize);
  }, [breakpoints, value]);
  return value;
};
function useResponsiveValue(values, options = {}) {
  const {
    theme
  } = core.useThemeUI();
  const array = typeof values === 'function' ? values(theme) : values;
  const index = useBreakpointIndex(options);
  return array[index >= array.length ? array.length - 1 : index];
}

exports.useBreakpointIndex = useBreakpointIndex;
exports.useResponsiveValue = useResponsiveValue;
